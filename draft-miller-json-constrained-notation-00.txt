



                                                               J. Miller

                                                          P. Saint-Andre
                                                             May 4, 2017


                    JSON Constrained Notation (JSCN)
                                 draft

Abstract

   This specification addresses the challenges of using JavaScript
   Object Notation (JSON) with constrained devices by providing a set of
   mapping rules to Concise Binary Object Representation (CBOR) that
   preserve all semantic information, such that the original JSON string
   can always be identically re-created.  JSON Constrained Notation can
   be used directly by devices as a native data format, which can always
   be represented as JSON when necessary for diagnostics, compatibility,
   and ease of integration with higher-level systems.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   1
     1.1.  Requirements Notations and Conventions  . . . . . . . . .   3
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  CBOR Encoding . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Structures  . . . . . . . . . . . . . . . . . . . . . . .   3
     2.2.  Simple Types  . . . . . . . . . . . . . . . . . . . . . .   3
     2.3.  Numbers . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.4.  Strings . . . . . . . . . . . . . . . . . . . . . . . . .   4
       2.4.1.  Base64 / Base16 Encoded . . . . . . . . . . . . . . .   4
   3.  Reference Sets  . . . . . . . . . . . . . . . . . . . . . . .   4
   4.  Whitespace Hints  . . . . . . . . . . . . . . . . . . . . . .   5
   5.  Constrained API . . . . . . . . . . . . . . . . . . . . . . .   5
   6.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12
     7.1.  CBOR Tag Registrations  . . . . . . . . . . . . . . . . .  12
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  12
   9.  Normative References  . . . . . . . . . . . . . . . . . . . .  12
   Appendix A.  Acknowledgements . . . . . . . . . . . . . . . . . .  13
   Appendix B.  Notices  . . . . . . . . . . . . . . . . . . . . . .  13
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  13

1.  Introduction

   Although JavaScript Object Notation (JSON) [RFC7159] has been widely
   adopted in traditional networking and software environments, its use
   in embedded and constrained environments has been more limited



Miller & Saint-Andre    Expires November 5, 2017                [Page 1]

                                  JSCN                          May 2017


   because of the minimal storage and network capacities inherent in
   low-cost and low-power devices (see [RFC7228]).

   This specification addresses the challenges of using JSON with
   constrained devices by defining a set of mapping rules to Concise
   Binary Object Representation (CBOR) [RFC7049] that preserve all
   semantic information, such that the original JSON string can always
   be identically re-created.  JSON Constrained Notation (JSCN) can be
   used directly by devices as a native data format, which can always be
   represented as JSON when necessary for diagnostics, compatibility,
   and ease of integration with higher-level systems.

   A primary goal of JSCN is to enable the use of all JOSE standards
   ([RFC7515], [RFC7516], [RFC7517], [RFC7518], [RFC7519]) unmodified in
   constrained environments and to enable the adoption of OpenID Connect
   as an identity management solution for the Internet of Things.

   JSCN is designed to leverage, not replace, CBOR.  Instead, JSCN
   specifies rules for re-coding JSON structures by mapping them to
   their CBOR parallels whenever possible, and then increasing the
   efficiency through introspection and replacement of well-known
   strings with compact references.

   All transcoding software must operate on a UTF-8 JSON string whenever
   complete round-trip compatibilityy to and from JSON is required,
   including mapping any contained non-structural whitespace (such as
   with JWTs for signature validation).  If a transcoder is only
   operating with an already parsed JSON value (the result of
   "JSON.parse()" in JavaScript for instance), the round-trip can only
   guarantee semantic compatibility of the values as represented in that
   parsed context (only the JavaScript object will always match).

   A significant reduction in space is also provided in JSCN when the
   device and application contexts can make use of built-in or shared
   UTF-8 string references.  These references provide a mapping of
   common JSON string values to an integer that used to replace the
   string in the resulting CBOR during re-coding.  JSON string values
   are also introspected for data that has a more compact CBOR type
   (such as base64url and hexadecimal encoding).

   This specification does not currently provide for the CBOR byte
   strings to be canonical and only guarantees that the JSON byte
   strings before and after re-coding will be identical.  It also
   defines basic API rules for constrained software such that accessing
   the CBOR data values will provide a uniform view even if the
   underlying CBOR has encoding differences.





Miller & Saint-Andre    Expires November 5, 2017                [Page 2]

                                  JSCN                          May 2017


1.1.  Requirements Notations and Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

1.2.  Terminology

   This specification uses the following terms:

   o  Reference

      *  Used within JSCN data to refer to well-known UTF-8 strings by
         using a CBOR byte string of length one, where the byte value is
         the reference lookup id.

   o  Reference Set

      *  A CBOR array of UTF-8 strings that are used to replace any
         reference within any JSCN data, the Reference id is the array
         offset to the replacement string, and the first position in the
         array identifies that Reference Set.

   o  Whitespace Hints

      *  A CBOR array of integers that indicate positional offsets and
         types of JSON whitespace strings (, "\n", "\r", and "\t") such
         that when any CBOR encoded data is stringified into JSON it can
         also optionally be corrected to exactly match the original JSON
         string.

2.  CBOR Encoding

2.1.  Structures

   Direct serialization of JSON structures to the CBOR major object/
   array types 4 and 5, ordering of key/value pairs in maps/objects must
   always be preserved.

2.2.  Simple Types

   JSON "true", "false", and "null" are serialized to their CBOR type 7
   simple values.








Miller & Saint-Andre    Expires November 5, 2017                [Page 3]

                                  JSCN                          May 2017


2.3.  Numbers

   Any JSON exponent value is encoded as a CBOR exponent (tag 4), if the
   contained "e" symbol is upper-case in JSON the case tag (31) must
   also be used.

   JSON numbers should be encoded as CBOR Integers (type 0 and 1) or
   Floats (type 7) and then tested for compatibility by round-tripping
   them back to a JSON number, any remaining incompatible numbers are
   encoded as Bigfloats (tag 5).

2.4.  Strings

   Strings are preserved as a UTF-8 string (type 3), they are always the
   bare escaped JSON string values and must not have been un- and re-
   escaped unless resticted by operating in a limited parsed context
   without any JSON compatibility guarantees.

2.4.1.  Base64 / Base16 Encoded

   All JSON strings must also be round-trip tested for possible
   encodings (base64url, base64, and hexadecimal) by attempting to
   decode and re-encode them, if identical byte strings result the
   decoded value is tagged in CBOR with the encoding format (tags 21,
   22, and 23/31).

   The resulting decoded byte string must be introspected to see if it
   begins with a JSON structure byte of '{' or '['.  It is then round-
   trip tested as a possible JSON object/array to be encoded more
   efficiently into a CBOR data item instead of a byte string (this
   pattern is common in JOSE).

3.  Reference Sets

   o  The Constrained JSON tag is followed by an array who's second item
      identifies the Reference Set used in the data, it is either the id
      value or an array that defines an inline Reference Set.

   o  Reference Sets are themselves identified with unique integer ids
      that must have a known mapping for apps using them, a registry
      will be created to assign the integer ids to public well-known
      reference sets.

   o  A references definition is itself encoded as a JSCN array where
      the first value is the references id followed by all of the UTF-8
      string keys, their position in the array is the byte value they
      are replaced with.




Miller & Saint-Andre    Expires November 5, 2017                [Page 4]

                                  JSCN                          May 2017


   o  Reference Sets may be combined when its JSCN definition also
      contains another Reference Set id, any byte strings in the
      definition array are then replaced with the key from the given
      references.

   o  Any JSON UTF-8 strings (keys or values) are first checked against
      all active references (if any) for possible replacement, any
      replacement is always a CBOR byte string (type 2) of length 1, the
      single byte represents the index value of the key in the
      references array from 1-255, value 0 and byte lengths >1 are
      currently reserved.

   o  When generating any JSON values from CBOR and a CBOR byte string
      (type 2) is encountered the single byte value must match the array
      offset of the active references to be used as the replacement for
      that byte string.

4.  Whitespace Hints

   o  Whitespace hints are an array that contains only integers which
      indicate offsets of the locations of whitespace in an original
      JSON string and lookup keys to what whitespace contents were
      there.

   o  Each offset integer is relative to the position of the previous
      offset such that all integers are of small values.

   o  Any negative integer offset indicates a single space character
      (0x20) at the offset of the positive value of that integer.

   o  All positive integer offsets are followed by another integer,
      positive values (0-23) indicate a whitespace string in a pre-
      defined lookup table, negative values are the number of space
      characters (0x20) to repeat.

   o  When adding back any whitespace to a JSON string the array must be
      applied sequentially so that each new offset matches the original
      JSON string position.

   (TODO embed whitespace lookup table and examples)

5.  Constrained API

   When the JSCN is being used directly by a software library all access
   to the contained data values must have both a native type and JSON-
   string API available so that a constrained application can choose
   either regardless of how the CBOR types represent the data.




Miller & Saint-Andre    Expires November 5, 2017                [Page 5]

                                  JSCN                          May 2017


   For example, when a JSON string value is encoded in JSCN as a CBOR
   base64url tag plus byte string, the application must be able to
   access either the original base64url string value or the CBOR binary
   byte string as needed by context, but should not alter behavior based
   on which way the value is encoded in CBOR.

6.  Examples

   JSON (318 bytes) to JSCN (187 bytes) with no references and
   whitespace preserved:

                           {
                             "map": "value",
                             "array": [
                               "one",
                               "two",
                               "three",
                               42
                             ],
                             "bool": true,
                             "neg": -42,
                             "simple": [
                               false,
                               null,
                               ""
                             ],
                             "ints": [
                               0,
                               1,
                               23,
                               24,
                               255,
                               256,
                               65535,
                               65536,
                               4294967295,
                               4294967296,
                               281474976710656,
                               -281474976710656
                             ]
                           }

        D4                              # tag(20)
           83                           # array(3)
              A6                        # map(6)
                 63                     # text(3)
                    6D6170              # "map"
                 65                     # text(5)



Miller & Saint-Andre    Expires November 5, 2017                [Page 6]

                                  JSCN                          May 2017


                    76616C7565          # "value"
                 65                     # text(5)
                    6172726179          # "array"
                 84                     # array(4)
                    63                  # text(3)
                       6F6E65           # "one"
                    63                  # text(3)
                       74776F           # "two"
                    65                  # text(5)
                       7468726565       # "three"
                    18 2A               # unsigned(42)
                 64                     # text(4)
                    626F6F6C            # "bool"
                 F5                     # primitive(21)
                 63                     # text(3)
                    6E6567              # "neg"
                 38 29                  # negative(41)
                 66                     # text(6)
                    73696D706C65        # "simple"
                 83                     # array(3)
                    F4                  # primitive(20)
                    F6                  # primitive(22)
                    60                  # text(0)
                                        # ""
                 64                     # text(4)
                    696E7473            # "ints"
                 8C                     # array(12)
                    00                  # unsigned(0)
                    01                  # unsigned(1)
                    17                  # unsigned(23)
                    18 18               # unsigned(24)
                    19 00FF             # unsigned(255)
                    19 0100             # unsigned(256)
                    19 FFFF             # unsigned(65535)
                    1A 00010000         # unsigned(65536)
                    1B 00000000FFFFFFFF # unsigned(4294967295)
                    1B 0000000100000000 # unsigned(4294967296)
                    1B 0001000000000000 # unsigned(281474976710656)
                    3B 0000FFFFFFFFFFFF # negative(281474976710655)
              00                        # unsigned(0)
              98 40                     # array(64)
                 01                     # unsigned(1)
                 01                     # unsigned(1)
                 26                     # negative(6)
                 08                     # unsigned(8)
                 01                     # unsigned(1)
                 28                     # negative(8)
                 01                     # unsigned(1)



Miller & Saint-Andre    Expires November 5, 2017                [Page 7]

                                  JSCN                          May 2017


                 02                     # unsigned(2)
                 06                     # unsigned(6)
                 02                     # unsigned(2)
                 06                     # unsigned(6)
                 02                     # unsigned(2)
                 08                     # unsigned(8)
                 02                     # unsigned(2)
                 02                     # unsigned(2)
                 01                     # unsigned(1)
                 02                     # unsigned(2)
                 01                     # unsigned(1)
                 27                     # negative(7)
                 05                     # unsigned(5)
                 01                     # unsigned(1)
                 26                     # negative(6)
                 04                     # unsigned(4)
                 01                     # unsigned(1)
                 29                     # negative(9)
                 01                     # unsigned(1)
                 02                     # unsigned(2)
                 06                     # unsigned(6)
                 02                     # unsigned(2)
                 05                     # unsigned(5)
                 02                     # unsigned(2)
                 02                     # unsigned(2)
                 01                     # unsigned(1)
                 02                     # unsigned(2)
                 01                     # unsigned(1)
                 27                     # negative(7)
                 01                     # unsigned(1)
                 02                     # unsigned(2)
                 02                     # unsigned(2)
                 02                     # unsigned(2)
                 02                     # unsigned(2)
                 02                     # unsigned(2)
                 03                     # unsigned(3)
                 02                     # unsigned(2)
                 03                     # unsigned(3)
                 02                     # unsigned(2)
                 04                     # unsigned(4)
                 02                     # unsigned(2)
                 04                     # unsigned(4)
                 02                     # unsigned(2)
                 06                     # unsigned(6)
                 02                     # unsigned(2)
                 06                     # unsigned(6)
                 02                     # unsigned(2)
                 0B                     # unsigned(11)



Miller & Saint-Andre    Expires November 5, 2017                [Page 8]

                                  JSCN                          May 2017


                 02                     # unsigned(2)
                 0B                     # unsigned(11)
                 02                     # unsigned(2)
                 10                     # unsigned(16)
                 02                     # unsigned(2)
                 10                     # unsigned(16)
                 01                     # unsigned(1)
                 01                     # unsigned(1)
                 00                     # unsigned(0)

   With no whitespace and using a Reference Set of "[1,"map","value","ar
   ray","one","two","three","bool","neg","simple","ints"]" (90 bytes):







































Miller & Saint-Andre    Expires November 5, 2017                [Page 9]

                                  JSCN                          May 2017


        D4                              # tag(20)
           82                           # array(2)
              A6                        # map(6)
                 41                     # bytes(1)
                    01                  # "\x01"
                 41                     # bytes(1)
                    02                  # "\x02"
                 41                     # bytes(1)
                    03                  # "\x03"
                 84                     # array(4)
                    41                  # bytes(1)
                       04               # "\x04"
                    41                  # bytes(1)
                       05               # "\x05"
                    41                  # bytes(1)
                       06               # "\x06"
                    18 2A               # unsigned(42)
                 41                     # bytes(1)
                    07                  # "\a"
                 F5                     # primitive(21)
                 41                     # bytes(1)
                    08                  # "\b"
                 38 29                  # negative(41)
                 41                     # bytes(1)
                    09                  # "\t"
                 83                     # array(3)
                    F4                  # primitive(20)
                    F6                  # primitive(22)
                    60                  # text(0)
                                        # ""
                 41                     # bytes(1)
                    0A                  # "\n"
                 8C                     # array(12)
                    00                  # unsigned(0)
                    01                  # unsigned(1)
                    17                  # unsigned(23)
                    18 18               # unsigned(24)
                    19 00FF             # unsigned(255)
                    19 0100             # unsigned(256)
                    19 FFFF             # unsigned(65535)
                    1A 00010000         # unsigned(65536)
                    1B 00000000FFFFFFFF # unsigned(4294967295)
                    1B 0000000100000000 # unsigned(4294967296)
                    1B 0001000000000000 # unsigned(281474976710656)
                    3B 0000FFFFFFFFFFFF # negative(281474976710655)
              01                        # unsigned(1)





Miller & Saint-Andre    Expires November 5, 2017               [Page 10]

                                  JSCN                          May 2017


   JWT (149 bytes) "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM
   0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBa
   b30RMHrHDcEfxjoYZgeFONFh7HgQ" converted to JSON (191):

{"protected":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9","payload":"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9","signature":"TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"}

   JSCN (80 bytes) using a Reference Set of "[1,"payload","signature","p
   rotected","alg","HS256","sub","name","admin"]":

D4                                      # tag(20)
   82                                   # array(2)
      A3                                # map(3)
         41                             # bytes(1)
            03                          # "\x03"
         D5                             # tag(21)
            A2                          # map(2)
               41                       # bytes(1)
                  04                    # "\x04"
               41                       # bytes(1)
                  05                    # "\x05"
               41                       # bytes(1)
                  06                    # "\x06"
               41                       # bytes(1)
                  07                    # "\a"
         41                             # bytes(1)
            01                          # "\x01"
         D5                             # tag(21)
            A3                          # map(3)
               41                       # bytes(1)
                  08                    # "\b"
               D7                       # tag(23)
                  45                    # bytes(5)
                     1234567890         # "\x124Vx\x90"
               41                       # bytes(1)
                  09                    # "\t"
               68                       # text(8)
                  4A6F686E20446F65      # "John Doe"
               41                       # bytes(1)
                  0A                    # "\n"
               F5                       # primitive(21)
         41                             # bytes(1)
            02                          # "\x02"
         D5                             # tag(21)
            58 20                       # bytes(32)
               4C9540F793AB33B13670169BDF444C1EB1C37047F18E861981E14E34587B1E04 # "L\x95@\xF7\x93\xAB3\xB16p\x16\x9B\xDFDL\x1E\xB1\xC3pG\xF1\x8E\x86\x19\x81\xE1N4X{\x1E\x04"
      01                                # unsigned(1)





Miller & Saint-Andre    Expires November 5, 2017               [Page 11]

                                  JSCN                          May 2017


7.  IANA Considerations

   The IANA is requested to assign the following tags from the "CBOR
   Tags" registry defined in RFC 7049 [RFC7049]:

   o  Assign the tag "Constrained JSON" in the 1 to 23 value range (one
      byte in length when encoded).

   o  Assign the tag "Upper Case Modifier" in the 24 to 255 value range
      (two bytes in length when encoded).

   The tags to be assigned are described below.

7.1.  CBOR Tag Registrations

Tag             20 (Constrained JSON)
Data Item       array
Semantics       First value in the array is always a constrained JSON data
                item encoded using JSCN, optionally followed by an integer
                or array identifying any embedded references, and then an
                optional array of whitespace hints if any.
Reference       http://quartzjer.github.io/JSCN
Contact         Jeremie Miller <jeremie.miller@gmail.com>

Tag             31 (Upper Case Modifier)
Data Item       multiple
Semantics       Indicates that the data item following contains values
                where the upper case is semantically important when
                interpreted in any UTF-8 string context.
Reference       http://quartzjer.github.io/JSCN
Contact         Jeremie Miller <jeremie.miller@gmail.com>

8.  Security Considerations

   TODO

9.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <http://www.rfc-editor.org/info/rfc7049>.





Miller & Saint-Andre    Expires November 5, 2017               [Page 12]

                                  JSCN                          May 2017


   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <http://www.rfc-editor.org/info/rfc7159>.

   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, "Terminology for
              Constrained-Node Networks", RFC 7228,
              DOI 10.17487/RFC7228, May 2014,
              <http://www.rfc-editor.org/info/rfc7228>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <http://www.rfc-editor.org/info/rfc7515>.

   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, DOI 10.17487/RFC7516, May 2015,
              <http://www.rfc-editor.org/info/rfc7516>.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
              DOI 10.17487/RFC7517, May 2015,
              <http://www.rfc-editor.org/info/rfc7517>.

   [RFC7518]  Jones, M., "JSON Web Algorithms (JWA)", RFC 7518,
              DOI 10.17487/RFC7518, May 2015,
              <http://www.rfc-editor.org/info/rfc7518>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <http://www.rfc-editor.org/info/rfc7519>.

Appendix A.  Acknowledgements

   The author wishes to thank you in advance.

Appendix B.  Notices

   TODO

Authors' Addresses

   Jeremie Miller

   Email: jeremie@jabber.org


   Peter Saint-Andre

   Email: stpeter@jabber.org




Miller & Saint-Andre    Expires November 5, 2017               [Page 13]
