



                                                               J. Miller
                                                           April 7, 2017


                    JSON Constrained Notation (JSCN)
                                 draft

Abstract

   The adoption of JSON is widespread in all traditional networking and
   software environments, but there has been more limited use in
   embedded and constrained environments due to the always-minimized
   storage and network capacities inherent in low-cost and low-power
   devices.

   This specification addresses the challenges of using JSON with
   constrained devices by providing a set of mapping rules to CBOR that
   are able to retain the complete semantic value of the data such that
   the orginal JSON string can always be identically re-created.  This
   constrained notation is intended to be usable directly by devices as
   a native data type which can always be represented as JSON when
   necessary for diagnostics, compatibility, and ease of integration
   with higher level systems.

   A driving goal of this specification has been to enable the direct
   use of all existing JOSE standards unmodified in a constrained
   environment and to enable the immediate adoption of OpenID Connect as
   an Identity Management standard for the IoT.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Notations and Conventions  . . . . . . . . .   2
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   2
     1.3.  CBOR Tag Registrations  . . . . . . . . . . . . . . . . .   3
   2.  CBOR Encoding . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Structures  . . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  Simple Types  . . . . . . . . . . . . . . . . . . . . . .   4
     2.3.  Numbers . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.4.  Strings . . . . . . . . . . . . . . . . . . . . . . . . .   4
       2.4.1.  Base64 / Base16 Encoded . . . . . . . . . . . . . . .   4
   3.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   4
   4.  Whitespace Hints  . . . . . . . . . . . . . . . . . . . . . .   5
   5.  Constrained API . . . . . . . . . . . . . . . . . . . . . . .   6
   6.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   9.  Normative References  . . . . . . . . . . . . . . . . . . . .   8



Miller                   Expires October 9, 2017                [Page 1]

                                  JSCN                        April 2017


   Appendix A.  Acknowledgements . . . . . . . . . . . . . . . . . .   8
   Appendix B.  Notices  . . . . . . . . . . . . . . . . . . . . . .   8
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   9

1.  Introduction

   JSCN is a subset of CBOR, the rules for re-coding the JSON structures
   all map directly to their CBOR parallels whenever possible.  Only
   when JSON string values can be introspected to contain data that has
   a more compact CBOR type (such as base64url and hexadecimal encoding)
   is additional mapping performed when re-coding the string value.

   All JSCN transcoder software must operate directly on a UTF-8 JSON
   string whenever round-trip compatibly to and from JSON is required
   including any contained non-structural whitespace (such as with JWTs
   for signature validation).  If a transcoder is only operating with an
   already parsed JSON value (the result of "JSON.parse()" in JavaScript
   for instance), the round-trip can only guarantee semantic
   compatibility of the values as represented in that parsed context.

   A significant reduction in space is also provided in JSCN when the
   device and application contexts can make use of built-in or shared
   dictionaries.  These dictionaries provide a mapping of common JSON
   string values to an integer that used instead in the resulting CBOR
   during re-coding.

   This specification does not currently provide for the CBOR byte
   strings to be canonical and only guarantees that the JSON byte
   strings before and after re-coding will be identical.  It also
   defines some API rules for constrained software such that accessing
   the CBOR data values will provide a uniform view even if the
   underlying CBOR has minor encoding differences.

1.1.  Requirements Notations and Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

1.2.  Terminology

   This specification uses the following terms:

   o  Reference

      *  Used within JSCN data to refer to well-known UTF-8 strings by
         using a CBOR byte string of length one, where the byte value is
         the reference lookup id.



Miller                   Expires October 9, 2017                [Page 2]

                                  JSCN                        April 2017


   o  References

      *  A CBOR array of UTF-8 strings that are used to replace any
         reference within any JSCN data, the reference id is the array
         offset to the replacement string.

   o  Whitespace Hints

      *  A CBOR array of integers that indicate positional offsets and
         types of JSON whitespace strings (, "\n", "\r", and "\t") such
         that when any CBOR encoded data is stringified into JSON it can
         also optionally be corrected to exactly match the original JSON
         string.

1.3.  CBOR Tag Registrations

Tag             20 (Constrained JSON)
Data Item       array
Semantics       First value in the array is always an embedded JSON data
                item encoded using JSCN, optionally followed by either
                an integer identifying embedded references or one or
                more inline reference strings.
Reference       http://quartzjer.github.io/JSCN
Contact         Jeremie Miller <jeremie.miller@gmail.com>

Tag             31 (Upper Case Modifier)
Data Item       multiple
Semantics       Indicates that the data item following contains values
                where the upper case is semantically important when
                interpreted in any UTF-8 string context.
Reference       http://quartzjer.github.io/JSCN
Contact         Jeremie Miller <jeremie.miller@gmail.com>

Tag             1764 (Whitespace Hints)
Data Item       array
Semantics       First value is any data item to be expanded with
                whitespace when stringified into a JSON context,
                followed by a sequence of integers describing the
                locations and types of whitespace to be added.
Reference       http://quartzjer.github.io/JSCN
Contact         Jeremie Miller <jeremie.miller@gmail.com>

2.  CBOR Encoding








Miller                   Expires October 9, 2017                [Page 3]

                                  JSCN                        April 2017


2.1.  Structures

   Direct serialization of JSON structures to the CBOR major object/
   array types 4 and 5, ordering of key/value pairs in maps/objects must
   always be preserved.

2.2.  Simple Types

   JSON "true", "false", and "null" are serialized to their CBOR type 7
   simple values.

2.3.  Numbers

   Any JSON exponent value is encoded as a CBOR exponent (tag 4), if the
   contained "e" symbol is upper-case in JSON the case tag (31) must
   also be used.

   JSON numbers should be encoded as CBOR Integers (type 0 and 1) or
   Floats (type 7) and then tested for compatibility by round-tripping
   them back to a JSON number, any remaining incompatible numbers are
   encoded as Bigfloats (tag 5).

2.4.  Strings

   Strings are preserved as a UTF-8 string (type 3), they are always the
   bare escaped JSON string values and must not have been un- and re-
   escaped unless resticted by operating in a limited parsed context
   without any JSON compatibility guarantees.

2.4.1.  Base64 / Base16 Encoded

   All JSON strings must also be round-trip tested for possible
   encodings (base64url, base64, and hexadecimal) by attempting to
   decode and re-encode them, if identical byte strings result the
   decoded value is tagged in CBOR with the encoding format (tags 21,
   22, and 23/31).

   The resulting decoded byte string must be introspected to see if it
   begins with a JSON structure byte of '{' or '['.  It is then round-
   trip tested as a possible JSON object/array to be encoded more
   efficiently into a CBOR data item instead of a byte string (this
   pattern is common in JOSE).

3.  References

   o  A CBOR tag of "20" indicates that the following array contains a
      JSCN-encoded data item as the first value of the array and an
      optional references id or inline reference strings.



Miller                   Expires October 9, 2017                [Page 4]

                                  JSCN                        April 2017


   o  References are themselves identified with a unique string or
      integer ids, the strings must have a known mapping for apps using
      them and a registry will be created to assign integer ids to
      public well-known dictionaries

   o  A references definition is itself encoded as a JSCN array where
      the first value is the references id followed by all of the UTF-8
      string keys, their position in the array is the byte value they
      are replaced with

   o  References may be combined when its JSCN definition also contains
      another references id, any byte strings in the definition array
      are then replaced with the key from the given references

   o  Any JSON UTF-8 strings (keys or values) are first checked against
      all active references (if any) for possible replacement, any
      replacement is always a CBOR byte string (type 2) of length 1, the
      single byte represents the index value of the key in the
      references array from 1-255, value 0 and byte lengths >1 are
      currently reserved

   o  When generating any JSON values from CBOR and a CBOR byte string
      (type 2) is encountered the single byte value must match the array
      offset of the active references to be used as the replacement for
      that byte string.

4.  Whitespace Hints

   o  A CBOR tag of "1764" is followed by an array that contains a JSCN
      data item followed by an array of whitespace hints to be used when
      the exact JSON string must be generated.

   o  The array contains only integers that indicate offsets of the
      locations of whitespace in the original JSON string and lookup
      keys to what whitespace contents were there

   o  Each offset integer is relative to the position of the previous
      offset such that all integers are of small values

   o  Any negative integer offset indicates a single space character
      (0x20) at the offset of the positive value of that integer

   o  All positive integer offsets are followed by another integer,
      positive values (0-23) indicate a whitespace string in a pre-
      defined lookup table, negative values are the number of space
      characters (0x20) to repeat





Miller                   Expires October 9, 2017                [Page 5]

                                  JSCN                        April 2017


   o  When adding back any whitespace to a JSON string the array must be
      applied sequentially so that each new offset matches the original
      JSON string position

   (TODO embed whitespace lookup table and examples)

5.  Constrained API

   When the JSCN is being used directly by a software library all access
   to the contained data values must have both a native type and JSON-
   string API available so that a constrained application can choose
   either regardless of how the CBOR types represent the data.

   For example, when a JSON string value is encoded in JSCN as a CBOR
   base64 tag plus byte string, the application must be able to access
   either the original string value or the CBOR binary byte string as
   needed by context.

6.  Examples

   JSON (318 bytes) to JSCN (189 bytes) with no references and
   whitespace preserved:





























Miller                   Expires October 9, 2017                [Page 6]

                                  JSCN                        April 2017


                           {
                             "map": "value",
                             "array": [
                               "one",
                               "two",
                               "three",
                               42
                             ],
                             "bool": true,
                             "neg": -42,
                             "simple": [
                               false,
                               null,
                               ""
                             ],
                             "ints": [
                               0,
                               1,
                               23,
                               24,
                               255,
                               256,
                               65535,
                               65536,
                               4294967295,
                               4294967296,
                               281474976710656,
                               -281474976710656
                             ]
                           }

           Offset: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
         00000000: D8 2A A2 01 A6 63 6D 61 70 65 76 61 6C 75 65 65
         00000010: 61 72 72 61 79 84 63 6F 6E 65 63 74 77 6F 65 74
         00000020: 68 72 65 65 18 2A 64 62 6F 6F 6C F5 63 6E 65 67
         00000030: 38 29 66 73 69 6D 70 6C 65 83 F4 F6 60 64 69 6E
         00000040: 74 73 8C 00 01 17 18 18 19 00 FF 19 01 00 19 FF
         00000050: FF 1A 00 01 00 00 1B 00 00 00 00 FF FF FF FF 1B
         00000060: 00 00 00 01 00 00 00 00 1B 00 01 00 00 00 00 00
         00000070: 00 3B 00 00 FF FF FF FF FF FF 03 9F 01 01 26 08
         00000080: 01 28 01 02 06 02 06 02 08 02 02 01 02 01 27 05
         00000090: 01 26 04 01 29 01 02 06 02 05 02 02 01 02 01 27
         000000a0: 01 02 02 02 02 02 03 02 03 02 04 02 04 02 06 02
         000000b0: 06 02 0B 02 0B 02 10 02 10 01 01 00 FF

   With no whitespace and using a references of "[1,"map","value","array
   ","one","two","three","bool","neg","simple","ints"]" (93 bytes):




Miller                   Expires October 9, 2017                [Page 7]

                                  JSCN                        April 2017


           Offset: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
         00000000: D8 2A A2 02 01 01 A6 41 01 41 02 41 03 84 41 04
         00000010: 41 05 41 06 18 2A 41 07 F5 41 08 38 29 41 09 83
         00000020: F4 F6 60 41 0A 8C 00 01 17 18 18 19 00 FF 19 01
         00000030: 00 19 FF FF 1A 00 01 00 00 1B 00 00 00 00 FF FF
         00000040: FF FF 1B 00 00 00 01 00 00 00 00 1B 00 01 00 00
         00000050: 00 00 00 00 3B 00 00 FF FF FF FF FF FF

7.  IANA Considerations

   The IANA is requested to assign the following tags from the "CBOR
   Tags" registry defined in RFC 7049 [RFC7049]:

   o  Assign the tag "Constrained JSON" in the 1 to 23 value range (one
      byte long when encoded).

   o  Assign the tag "Upper Case Modifier" in the 24 to 255 value range
      (two bytes long when encoded).

   The tags to be assigned are described in Section 1.3 of this
   document.

8.  Security Considerations

   TODO

9.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <http://www.rfc-editor.org/info/rfc7049>.

Appendix A.  Acknowledgements

   The author wishes to thank you in advance.

Appendix B.  Notices

   TODO







Miller                   Expires October 9, 2017                [Page 8]

                                  JSCN                        April 2017


Author's Address

   Jeremie Miller

   Email: jeremie@jabber.org














































Miller                   Expires October 9, 2017                [Page 9]
